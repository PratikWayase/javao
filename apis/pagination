const express = require('express');
const router = express.Router();
const { Pool } = require('pg');
const { Base64 } = require('js-base64');

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
});

// Helpers for cursor-based pagination
const encodeCursor = (value, id) => Base64.encodeURI(JSON.stringify({ value, id }));
const decodeCursor = (cursor) => JSON.parse(Base64.decode(cursor));

// Validate limit and sort
const validatePagination = (req, res, next) => {
  const { limit = 20, sort } = req.query;
  if (limit < 1 || limit > 100) return res.status(400).json({ error: 'Limit must be 1-100' });
  if (sort && !['newest', 'rating', 'enrolled'].includes(sort.toLowerCase())) 
    return res.status(400).json({ error: 'Invalid sort option' });
  next();
};

// Fetch available filters (dummy for now)
const getAvailableCategories = async () => [];
const getAvailableLanguages = async () => [];
const getTotalCount = async (queryParts) => 0;

// GET /courses
router.get('/courses', validatePagination, async (req, res) => {
  try {
    const { limit = 20, direction = 'forward', sort = 'newest', cursor, category, instructor, language, level } = req.query;
    const isBackward = direction === 'backward';
    const sortField = { newest: 'c.created_at', rating: 'c.rating', enrolled: 'c.enrollment_count' }[sort.toLowerCase()];
    const sortOrder = isBackward ? 'ASC' : 'DESC';

    const params = [];
    const filters = [];
    if (category) filters.push(`c.category = $${params.push(category)}`);
    if (instructor) filters.push(`i.name ILIKE $${params.push(`%${instructor}%`)}`);
    if (language) filters.push(`c.language = $${params.push(language)}`);
    if (level) filters.push(`c.level = $${params.push(level)}`);
    if (cursor) {
      const { value, id } = decodeCursor(cursor);
      filters.push(`(${sortField}, c.id) ${isBackward ? '>' : '<'} ($${params.push(value)}, $${params.push(id)})`);
    }

    const query = `
      SELECT c.id, c.name, c.description, c.created_at, c.instructor_id, i.name AS instructor_name,
             i.avatar AS instructor_avatar, c.rating, c.enrollment_count, c.level, c.category, c.language,
             c.thumbnail_url, (SELECT COUNT(*) FROM modules m WHERE m.course_id = c.id) AS module_count,
             (SELECT AVG(rating) FROM reviews WHERE course_id = c.id) AS avg_rating
      FROM courses c
      JOIN instructors i ON c.instructor_id = i.id
      ${filters.length ? `WHERE ${filters.join(' AND ')}` : ''}
      ORDER BY ${sortField} ${sortOrder}, c.id ${sortOrder}
      LIMIT $${params.push(parseInt(limit) + 1)}
    `;

    const { rows } = await pool.query({ text: query, values: params });
    const hasMore = rows.length > limit;
    const items = hasMore ? rows.slice(0, limit) : rows;

    const response = {
      meta: {
        pagination: {
          limit: parseInt(limit),
          hasNextPage: isBackward ? rows.length > 0 : hasMore,
          hasPreviousPage: isBackward ? hasMore : rows.length > 0,
          nextCursor: items.length ? encodeCursor(items.at(-1)[sortField], items.at(-1).id) : null,
          previousCursor: items.length ? encodeCursor(items[0][sortField], items[0].id) : null,
          sort, direction,
        },
        filters: {
          category, instructor, language, level,
          availableCategories: await getAvailableCategories(),
          availableLanguages: await getAvailableLanguages(),
        },
        resultInfo: {
          count: items.length,
          total: await getTotalCount(), // Stubbed for now
        },
      },
      data: items.map(c => ({
        id: c.id,
        name: c.name,
        description: c.description,
        instructor: { id: c.instructor_id, name: c.instructor_name, avatar: c.instructor_avatar },
        rating: c.avg_rating || c.rating,
        enrollmentCount: c.enrollment_count,
        moduleCount: c.module_count,
        category: c.category,
        language: c.language,
        level: c.level,
        thumbnailUrl: c.thumbnail_url,
        createdAt: c.created_at.toISOString(),
      })),
    };

    res.setHeader('Cache-Control', 'public, max-age=60');
    res.json(response);

  } catch (err) {
    console.error('Error fetching courses:', err);
    res.status(500).json({ error: 'Internal server error' });
  }
});

module.exports = router;
